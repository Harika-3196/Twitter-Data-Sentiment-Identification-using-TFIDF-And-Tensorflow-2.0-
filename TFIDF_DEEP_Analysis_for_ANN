{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-01-17T16:58:45.778417Z",
     "start_time": "2021-01-17T16:58:41.022244Z"
    }
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import tensorflow as tf\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-01-17T16:58:45.784618Z",
     "start_time": "2021-01-17T16:58:45.780996Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2.3.0\n"
     ]
    }
   ],
   "source": [
    "print(tf.__version__)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-01-17T16:58:45.857551Z",
     "start_time": "2021-01-17T16:58:45.787581Z"
    }
   },
   "outputs": [],
   "source": [
    "df=pd.read_csv(\"tweets.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-01-17T16:58:45.883219Z",
     "start_time": "2021-01-17T16:58:45.860295Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>tweet_id</th>\n",
       "      <th>airline_sentiment</th>\n",
       "      <th>airline_sentiment_confidence</th>\n",
       "      <th>negativereason</th>\n",
       "      <th>negativereason_confidence</th>\n",
       "      <th>airline</th>\n",
       "      <th>airline_sentiment_gold</th>\n",
       "      <th>name</th>\n",
       "      <th>negativereason_gold</th>\n",
       "      <th>retweet_count</th>\n",
       "      <th>text</th>\n",
       "      <th>tweet_coord</th>\n",
       "      <th>tweet_created</th>\n",
       "      <th>tweet_location</th>\n",
       "      <th>user_timezone</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>570306133677760513</td>\n",
       "      <td>neutral</td>\n",
       "      <td>1.0000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Virgin America</td>\n",
       "      <td>NaN</td>\n",
       "      <td>cairdin</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>@VirginAmerica What @dhepburn said.</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2015-02-24 11:35:52 -0800</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Eastern Time (US &amp; Canada)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>570301130888122368</td>\n",
       "      <td>positive</td>\n",
       "      <td>0.3486</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>Virgin America</td>\n",
       "      <td>NaN</td>\n",
       "      <td>jnardino</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>@VirginAmerica plus you've added commercials t...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2015-02-24 11:15:59 -0800</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Pacific Time (US &amp; Canada)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>570301083672813571</td>\n",
       "      <td>neutral</td>\n",
       "      <td>0.6837</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Virgin America</td>\n",
       "      <td>NaN</td>\n",
       "      <td>yvonnalynn</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>@VirginAmerica I didn't today... Must mean I n...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2015-02-24 11:15:48 -0800</td>\n",
       "      <td>Lets Play</td>\n",
       "      <td>Central Time (US &amp; Canada)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>570301031407624196</td>\n",
       "      <td>negative</td>\n",
       "      <td>1.0000</td>\n",
       "      <td>Bad Flight</td>\n",
       "      <td>0.7033</td>\n",
       "      <td>Virgin America</td>\n",
       "      <td>NaN</td>\n",
       "      <td>jnardino</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>@VirginAmerica it's really aggressive to blast...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2015-02-24 11:15:36 -0800</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Pacific Time (US &amp; Canada)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>570300817074462722</td>\n",
       "      <td>negative</td>\n",
       "      <td>1.0000</td>\n",
       "      <td>Can't Tell</td>\n",
       "      <td>1.0000</td>\n",
       "      <td>Virgin America</td>\n",
       "      <td>NaN</td>\n",
       "      <td>jnardino</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>@VirginAmerica and it's a really big bad thing...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2015-02-24 11:14:45 -0800</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Pacific Time (US &amp; Canada)</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             tweet_id airline_sentiment  airline_sentiment_confidence  \\\n",
       "0  570306133677760513           neutral                        1.0000   \n",
       "1  570301130888122368          positive                        0.3486   \n",
       "2  570301083672813571           neutral                        0.6837   \n",
       "3  570301031407624196          negative                        1.0000   \n",
       "4  570300817074462722          negative                        1.0000   \n",
       "\n",
       "  negativereason  negativereason_confidence         airline  \\\n",
       "0            NaN                        NaN  Virgin America   \n",
       "1            NaN                     0.0000  Virgin America   \n",
       "2            NaN                        NaN  Virgin America   \n",
       "3     Bad Flight                     0.7033  Virgin America   \n",
       "4     Can't Tell                     1.0000  Virgin America   \n",
       "\n",
       "  airline_sentiment_gold        name negativereason_gold  retweet_count  \\\n",
       "0                    NaN     cairdin                 NaN              0   \n",
       "1                    NaN    jnardino                 NaN              0   \n",
       "2                    NaN  yvonnalynn                 NaN              0   \n",
       "3                    NaN    jnardino                 NaN              0   \n",
       "4                    NaN    jnardino                 NaN              0   \n",
       "\n",
       "                                                text tweet_coord  \\\n",
       "0                @VirginAmerica What @dhepburn said.         NaN   \n",
       "1  @VirginAmerica plus you've added commercials t...         NaN   \n",
       "2  @VirginAmerica I didn't today... Must mean I n...         NaN   \n",
       "3  @VirginAmerica it's really aggressive to blast...         NaN   \n",
       "4  @VirginAmerica and it's a really big bad thing...         NaN   \n",
       "\n",
       "               tweet_created tweet_location               user_timezone  \n",
       "0  2015-02-24 11:35:52 -0800            NaN  Eastern Time (US & Canada)  \n",
       "1  2015-02-24 11:15:59 -0800            NaN  Pacific Time (US & Canada)  \n",
       "2  2015-02-24 11:15:48 -0800      Lets Play  Central Time (US & Canada)  \n",
       "3  2015-02-24 11:15:36 -0800            NaN  Pacific Time (US & Canada)  \n",
       "4  2015-02-24 11:14:45 -0800            NaN  Pacific Time (US & Canada)  "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-01-17T16:58:45.889175Z",
     "start_time": "2021-01-17T16:58:45.885406Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "15"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(df.columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-01-17T16:58:45.894544Z",
     "start_time": "2021-01-17T16:58:45.890892Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "14640"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(df)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Remove missing values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-01-17T16:58:45.917002Z",
     "start_time": "2021-01-17T16:58:45.896651Z"
    }
   },
   "outputs": [],
   "source": [
    "percent_missing=df.isnull().sum()*100/len(df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-01-17T16:58:45.927579Z",
     "start_time": "2021-01-17T16:58:45.921414Z"
    }
   },
   "outputs": [],
   "source": [
    "missing_value_df=pd.DataFrame({\"column name\":df.columns,'percent_missing':percent_missing})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-01-17T16:58:45.945960Z",
     "start_time": "2021-01-17T16:58:45.931910Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>column name</th>\n",
       "      <th>percent_missing</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>tweet_id</th>\n",
       "      <td>tweet_id</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>airline_sentiment</th>\n",
       "      <td>airline_sentiment</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>airline_sentiment_confidence</th>\n",
       "      <td>airline_sentiment_confidence</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>negativereason</th>\n",
       "      <td>negativereason</td>\n",
       "      <td>37.308743</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>negativereason_confidence</th>\n",
       "      <td>negativereason_confidence</td>\n",
       "      <td>28.128415</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>airline</th>\n",
       "      <td>airline</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>airline_sentiment_gold</th>\n",
       "      <td>airline_sentiment_gold</td>\n",
       "      <td>99.726776</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>name</th>\n",
       "      <td>name</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>negativereason_gold</th>\n",
       "      <td>negativereason_gold</td>\n",
       "      <td>99.781421</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>retweet_count</th>\n",
       "      <td>retweet_count</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>text</th>\n",
       "      <td>text</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>tweet_coord</th>\n",
       "      <td>tweet_coord</td>\n",
       "      <td>93.039617</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>tweet_created</th>\n",
       "      <td>tweet_created</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>tweet_location</th>\n",
       "      <td>tweet_location</td>\n",
       "      <td>32.329235</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>user_timezone</th>\n",
       "      <td>user_timezone</td>\n",
       "      <td>32.923497</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                               column name  percent_missing\n",
       "tweet_id                                          tweet_id         0.000000\n",
       "airline_sentiment                        airline_sentiment         0.000000\n",
       "airline_sentiment_confidence  airline_sentiment_confidence         0.000000\n",
       "negativereason                              negativereason        37.308743\n",
       "negativereason_confidence        negativereason_confidence        28.128415\n",
       "airline                                            airline         0.000000\n",
       "airline_sentiment_gold              airline_sentiment_gold        99.726776\n",
       "name                                                  name         0.000000\n",
       "negativereason_gold                    negativereason_gold        99.781421\n",
       "retweet_count                                retweet_count         0.000000\n",
       "text                                                  text         0.000000\n",
       "tweet_coord                                    tweet_coord        93.039617\n",
       "tweet_created                                tweet_created         0.000000\n",
       "tweet_location                              tweet_location        32.329235\n",
       "user_timezone                                user_timezone        32.923497"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "missing_value_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-01-17T16:58:45.956620Z",
     "start_time": "2021-01-17T16:58:45.948824Z"
    }
   },
   "outputs": [],
   "source": [
    "df.drop([\"airline_sentiment_gold\",\"negativereason_gold\",\"tweet_coord\"],inplace=True,axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-01-17T16:58:45.962972Z",
     "start_time": "2021-01-17T16:58:45.958815Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "12"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(df.columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-01-17T16:58:46.154238Z",
     "start_time": "2021-01-17T16:58:45.964982Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df[\"airline_sentiment\"].value_counts().plot(kind=\"bar\");"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-01-17T16:58:46.347237Z",
     "start_time": "2021-01-17T16:58:46.157070Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.hist(df[\"airline_sentiment_confidence\"],bins=10);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-01-17T16:58:46.595612Z",
     "start_time": "2021-01-17T16:58:46.349217Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7fa2921bb310>"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df[\"negativereason\"].value_counts().plot(kind=\"bar\",color=[\"maroon\",\"gold\",\"black\",\"blue\",\"grey\",\"skyblue\",\"green\",\"red\",\"yellow\",\"orange\",\"pink\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-01-17T16:58:46.797317Z",
     "start_time": "2021-01-17T16:58:46.597625Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/anaconda3/envs/rec_sys/lib/python3.7/site-packages/numpy/lib/histograms.py:839: RuntimeWarning: invalid value encountered in greater_equal\n",
      "  keep = (tmp_a >= first_edge)\n",
      "/opt/anaconda3/envs/rec_sys/lib/python3.7/site-packages/numpy/lib/histograms.py:840: RuntimeWarning: invalid value encountered in less_equal\n",
      "  keep &= (tmp_a <= last_edge)\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.hist(df[\"negativereason_confidence\"],bins=10);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-01-17T16:58:46.808654Z",
     "start_time": "2021-01-17T16:58:46.800009Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "United            3822\n",
       "US Airways        2913\n",
       "American          2759\n",
       "Southwest         2420\n",
       "Delta             2222\n",
       "Virgin America     504\n",
       "Name: airline, dtype: int64"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[\"airline\"].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-01-17T16:58:46.838952Z",
     "start_time": "2021-01-17T16:58:46.810613Z"
    }
   },
   "outputs": [],
   "source": [
    "df[\"len_of_text\"]=df[\"text\"].apply(lambda x:len(x.split()))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-01-17T16:58:46.851998Z",
     "start_time": "2021-01-17T16:58:46.841784Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>text</th>\n",
       "      <th>len_of_text</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>@VirginAmerica What @dhepburn said.</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>@VirginAmerica plus you've added commercials t...</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>@VirginAmerica I didn't today... Must mean I n...</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>@VirginAmerica it's really aggressive to blast...</td>\n",
       "      <td>17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>@VirginAmerica and it's a really big bad thing...</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                text  len_of_text\n",
       "0                @VirginAmerica What @dhepburn said.            4\n",
       "1  @VirginAmerica plus you've added commercials t...            9\n",
       "2  @VirginAmerica I didn't today... Must mean I n...           12\n",
       "3  @VirginAmerica it's really aggressive to blast...           17\n",
       "4  @VirginAmerica and it's a really big bad thing...           10"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[[\"text\",\"len_of_text\"]].head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-01-17T16:58:46.859580Z",
     "start_time": "2021-01-17T16:58:46.854076Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "36"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[\"len_of_text\"].max()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-01-17T16:58:46.878530Z",
     "start_time": "2021-01-17T16:58:46.862690Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>text</th>\n",
       "      <th>len_of_text</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>@VirginAmerica Thanks!</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>193</th>\n",
       "      <td>@VirginAmerica thanks!</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>331</th>\n",
       "      <td>@VirginAmerica Thanks!</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>504</th>\n",
       "      <td>@united thanks</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>515</th>\n",
       "      <td>@united thanks</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13151</th>\n",
       "      <td>@AmericanAir thanks.....</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13213</th>\n",
       "      <td>@AmericanAir done.</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13259</th>\n",
       "      <td>@AmericanAir refund</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13766</th>\n",
       "      <td>@AmericanAir thanks</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14300</th>\n",
       "      <td>@AmericanAir delayed.....wow</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>120 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                               text  len_of_text\n",
       "14           @VirginAmerica Thanks!            2\n",
       "193          @VirginAmerica thanks!            2\n",
       "331          @VirginAmerica Thanks!            2\n",
       "504                  @united thanks            2\n",
       "515                  @united thanks            2\n",
       "...                             ...          ...\n",
       "13151      @AmericanAir thanks.....            2\n",
       "13213            @AmericanAir done.            2\n",
       "13259           @AmericanAir refund            2\n",
       "13766           @AmericanAir thanks            2\n",
       "14300  @AmericanAir delayed.....wow            2\n",
       "\n",
       "[120 rows x 2 columns]"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[df[\"len_of_text\"]==2][[\"text\",\"len_of_text\"]]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-01-17T16:58:47.098890Z",
     "start_time": "2021-01-17T16:58:46.880890Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.hist(df[\"len_of_text\"]);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-01-17T16:58:47.106691Z",
     "start_time": "2021-01-17T16:58:47.100824Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "14630    2015-02-22 12:04:09 -0800\n",
       "14631    2015-02-22 12:04:07 -0800\n",
       "14632    2015-02-22 12:01:31 -0800\n",
       "14633    2015-02-22 12:01:06 -0800\n",
       "14634    2015-02-22 12:01:02 -0800\n",
       "14635    2015-02-22 12:01:01 -0800\n",
       "14636    2015-02-22 11:59:46 -0800\n",
       "14637    2015-02-22 11:59:15 -0800\n",
       "14638    2015-02-22 11:59:02 -0800\n",
       "14639    2015-02-22 11:58:51 -0800\n",
       "Name: tweet_created, dtype: object"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[\"tweet_created\"].tail(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-01-17T16:58:47.120479Z",
     "start_time": "2021-01-17T16:58:47.115074Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3081"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[\"tweet_location\"].nunique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-01-17T16:58:47.131631Z",
     "start_time": "2021-01-17T16:58:47.126070Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "14440                           NaN\n",
       "14441                        London\n",
       "14442    Pacific Time (US & Canada)\n",
       "14443                           NaN\n",
       "14444                           NaN\n",
       "                    ...            \n",
       "14635                           NaN\n",
       "14636                           NaN\n",
       "14637                           NaN\n",
       "14638    Eastern Time (US & Canada)\n",
       "14639                           NaN\n",
       "Name: user_timezone, Length: 200, dtype: object"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[\"user_timezone\"].tail(200)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-01-17T16:58:47.147200Z",
     "start_time": "2021-01-17T16:58:47.134057Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "airline         airline_sentiment\n",
       "American        positive              336\n",
       "                neutral               463\n",
       "                negative             1960\n",
       "Delta           positive              544\n",
       "                neutral               723\n",
       "                negative              955\n",
       "Southwest       positive              570\n",
       "                neutral               664\n",
       "                negative             1186\n",
       "US Airways      positive              269\n",
       "                neutral               381\n",
       "                negative             2263\n",
       "United          positive              492\n",
       "                neutral               697\n",
       "                negative             2633\n",
       "Virgin America  positive              152\n",
       "                neutral               171\n",
       "                negative              181\n",
       "Name: airline_sentiment, dtype: int64"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.groupby(\"airline\")[\"airline_sentiment\"].value_counts(ascending=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-01-17T16:58:47.173167Z",
     "start_time": "2021-01-17T16:58:47.149249Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>airline_sentiment</th>\n",
       "      <th>negative</th>\n",
       "      <th>neutral</th>\n",
       "      <th>positive</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>airline</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>American</th>\n",
       "      <td>1960</td>\n",
       "      <td>463</td>\n",
       "      <td>336</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Delta</th>\n",
       "      <td>955</td>\n",
       "      <td>723</td>\n",
       "      <td>544</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Southwest</th>\n",
       "      <td>1186</td>\n",
       "      <td>664</td>\n",
       "      <td>570</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>US Airways</th>\n",
       "      <td>2263</td>\n",
       "      <td>381</td>\n",
       "      <td>269</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>United</th>\n",
       "      <td>2633</td>\n",
       "      <td>697</td>\n",
       "      <td>492</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Virgin America</th>\n",
       "      <td>181</td>\n",
       "      <td>171</td>\n",
       "      <td>152</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "airline_sentiment  negative  neutral  positive\n",
       "airline                                       \n",
       "American               1960      463       336\n",
       "Delta                   955      723       544\n",
       "Southwest              1186      664       570\n",
       "US Airways             2263      381       269\n",
       "United                 2633      697       492\n",
       "Virgin America          181      171       152"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.crosstab(df[\"airline\"],df[\"airline_sentiment\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-01-17T16:58:47.517344Z",
     "start_time": "2021-01-17T16:58:47.176128Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "pd.crosstab(df[\"airline\"],df[\"airline_sentiment\"]).plot.bar(figsize=(8,8),color=[\"red\",\"blue\",\"green\"]);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-01-17T16:58:47.535365Z",
     "start_time": "2021-01-17T16:58:47.519127Z"
    }
   },
   "outputs": [],
   "source": [
    "negative_reasons=pd.crosstab(df[\"airline\"],df[\"negativereason\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-01-17T16:58:47.618728Z",
     "start_time": "2021-01-17T16:58:47.537242Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style  type=\"text/css\" >\n",
       "    #T_43f9aefc_58e5_11eb_b7f9_645aedea5f3frow0_col3 {\n",
       "            background-color:  red;\n",
       "        }    #T_43f9aefc_58e5_11eb_b7f9_645aedea5f3frow1_col7 {\n",
       "            background-color:  red;\n",
       "        }    #T_43f9aefc_58e5_11eb_b7f9_645aedea5f3frow2_col3 {\n",
       "            background-color:  red;\n",
       "        }    #T_43f9aefc_58e5_11eb_b7f9_645aedea5f3frow3_col3 {\n",
       "            background-color:  red;\n",
       "        }    #T_43f9aefc_58e5_11eb_b7f9_645aedea5f3frow4_col3 {\n",
       "            background-color:  red;\n",
       "        }    #T_43f9aefc_58e5_11eb_b7f9_645aedea5f3frow5_col3 {\n",
       "            background-color:  red;\n",
       "        }</style><table id=\"T_43f9aefc_58e5_11eb_b7f9_645aedea5f3f\" ><thead>    <tr>        <th class=\"index_name level0\" >negativereason</th>        <th class=\"col_heading level0 col0\" >Bad Flight</th>        <th class=\"col_heading level0 col1\" >Can't Tell</th>        <th class=\"col_heading level0 col2\" >Cancelled Flight</th>        <th class=\"col_heading level0 col3\" >Customer Service Issue</th>        <th class=\"col_heading level0 col4\" >Damaged Luggage</th>        <th class=\"col_heading level0 col5\" >Flight Attendant Complaints</th>        <th class=\"col_heading level0 col6\" >Flight Booking Problems</th>        <th class=\"col_heading level0 col7\" >Late Flight</th>        <th class=\"col_heading level0 col8\" >Lost Luggage</th>        <th class=\"col_heading level0 col9\" >longlines</th>    </tr>    <tr>        <th class=\"index_name level0\" >airline</th>        <th class=\"blank\" ></th>        <th class=\"blank\" ></th>        <th class=\"blank\" ></th>        <th class=\"blank\" ></th>        <th class=\"blank\" ></th>        <th class=\"blank\" ></th>        <th class=\"blank\" ></th>        <th class=\"blank\" ></th>        <th class=\"blank\" ></th>        <th class=\"blank\" ></th>    </tr></thead><tbody>\n",
       "                <tr>\n",
       "                        <th id=\"T_43f9aefc_58e5_11eb_b7f9_645aedea5f3flevel0_row0\" class=\"row_heading level0 row0\" >American</th>\n",
       "                        <td id=\"T_43f9aefc_58e5_11eb_b7f9_645aedea5f3frow0_col0\" class=\"data row0 col0\" >87</td>\n",
       "                        <td id=\"T_43f9aefc_58e5_11eb_b7f9_645aedea5f3frow0_col1\" class=\"data row0 col1\" >198</td>\n",
       "                        <td id=\"T_43f9aefc_58e5_11eb_b7f9_645aedea5f3frow0_col2\" class=\"data row0 col2\" >246</td>\n",
       "                        <td id=\"T_43f9aefc_58e5_11eb_b7f9_645aedea5f3frow0_col3\" class=\"data row0 col3\" >768</td>\n",
       "                        <td id=\"T_43f9aefc_58e5_11eb_b7f9_645aedea5f3frow0_col4\" class=\"data row0 col4\" >12</td>\n",
       "                        <td id=\"T_43f9aefc_58e5_11eb_b7f9_645aedea5f3frow0_col5\" class=\"data row0 col5\" >87</td>\n",
       "                        <td id=\"T_43f9aefc_58e5_11eb_b7f9_645aedea5f3frow0_col6\" class=\"data row0 col6\" >130</td>\n",
       "                        <td id=\"T_43f9aefc_58e5_11eb_b7f9_645aedea5f3frow0_col7\" class=\"data row0 col7\" >249</td>\n",
       "                        <td id=\"T_43f9aefc_58e5_11eb_b7f9_645aedea5f3frow0_col8\" class=\"data row0 col8\" >149</td>\n",
       "                        <td id=\"T_43f9aefc_58e5_11eb_b7f9_645aedea5f3frow0_col9\" class=\"data row0 col9\" >34</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                        <th id=\"T_43f9aefc_58e5_11eb_b7f9_645aedea5f3flevel0_row1\" class=\"row_heading level0 row1\" >Delta</th>\n",
       "                        <td id=\"T_43f9aefc_58e5_11eb_b7f9_645aedea5f3frow1_col0\" class=\"data row1 col0\" >64</td>\n",
       "                        <td id=\"T_43f9aefc_58e5_11eb_b7f9_645aedea5f3frow1_col1\" class=\"data row1 col1\" >186</td>\n",
       "                        <td id=\"T_43f9aefc_58e5_11eb_b7f9_645aedea5f3frow1_col2\" class=\"data row1 col2\" >51</td>\n",
       "                        <td id=\"T_43f9aefc_58e5_11eb_b7f9_645aedea5f3frow1_col3\" class=\"data row1 col3\" >199</td>\n",
       "                        <td id=\"T_43f9aefc_58e5_11eb_b7f9_645aedea5f3frow1_col4\" class=\"data row1 col4\" >11</td>\n",
       "                        <td id=\"T_43f9aefc_58e5_11eb_b7f9_645aedea5f3frow1_col5\" class=\"data row1 col5\" >60</td>\n",
       "                        <td id=\"T_43f9aefc_58e5_11eb_b7f9_645aedea5f3frow1_col6\" class=\"data row1 col6\" >44</td>\n",
       "                        <td id=\"T_43f9aefc_58e5_11eb_b7f9_645aedea5f3frow1_col7\" class=\"data row1 col7\" >269</td>\n",
       "                        <td id=\"T_43f9aefc_58e5_11eb_b7f9_645aedea5f3frow1_col8\" class=\"data row1 col8\" >57</td>\n",
       "                        <td id=\"T_43f9aefc_58e5_11eb_b7f9_645aedea5f3frow1_col9\" class=\"data row1 col9\" >14</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                        <th id=\"T_43f9aefc_58e5_11eb_b7f9_645aedea5f3flevel0_row2\" class=\"row_heading level0 row2\" >Southwest</th>\n",
       "                        <td id=\"T_43f9aefc_58e5_11eb_b7f9_645aedea5f3frow2_col0\" class=\"data row2 col0\" >90</td>\n",
       "                        <td id=\"T_43f9aefc_58e5_11eb_b7f9_645aedea5f3frow2_col1\" class=\"data row2 col1\" >159</td>\n",
       "                        <td id=\"T_43f9aefc_58e5_11eb_b7f9_645aedea5f3frow2_col2\" class=\"data row2 col2\" >162</td>\n",
       "                        <td id=\"T_43f9aefc_58e5_11eb_b7f9_645aedea5f3frow2_col3\" class=\"data row2 col3\" >391</td>\n",
       "                        <td id=\"T_43f9aefc_58e5_11eb_b7f9_645aedea5f3frow2_col4\" class=\"data row2 col4\" >14</td>\n",
       "                        <td id=\"T_43f9aefc_58e5_11eb_b7f9_645aedea5f3frow2_col5\" class=\"data row2 col5\" >38</td>\n",
       "                        <td id=\"T_43f9aefc_58e5_11eb_b7f9_645aedea5f3frow2_col6\" class=\"data row2 col6\" >61</td>\n",
       "                        <td id=\"T_43f9aefc_58e5_11eb_b7f9_645aedea5f3frow2_col7\" class=\"data row2 col7\" >152</td>\n",
       "                        <td id=\"T_43f9aefc_58e5_11eb_b7f9_645aedea5f3frow2_col8\" class=\"data row2 col8\" >90</td>\n",
       "                        <td id=\"T_43f9aefc_58e5_11eb_b7f9_645aedea5f3frow2_col9\" class=\"data row2 col9\" >29</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                        <th id=\"T_43f9aefc_58e5_11eb_b7f9_645aedea5f3flevel0_row3\" class=\"row_heading level0 row3\" >US Airways</th>\n",
       "                        <td id=\"T_43f9aefc_58e5_11eb_b7f9_645aedea5f3frow3_col0\" class=\"data row3 col0\" >104</td>\n",
       "                        <td id=\"T_43f9aefc_58e5_11eb_b7f9_645aedea5f3frow3_col1\" class=\"data row3 col1\" >246</td>\n",
       "                        <td id=\"T_43f9aefc_58e5_11eb_b7f9_645aedea5f3frow3_col2\" class=\"data row3 col2\" >189</td>\n",
       "                        <td id=\"T_43f9aefc_58e5_11eb_b7f9_645aedea5f3frow3_col3\" class=\"data row3 col3\" >811</td>\n",
       "                        <td id=\"T_43f9aefc_58e5_11eb_b7f9_645aedea5f3frow3_col4\" class=\"data row3 col4\" >11</td>\n",
       "                        <td id=\"T_43f9aefc_58e5_11eb_b7f9_645aedea5f3frow3_col5\" class=\"data row3 col5\" >123</td>\n",
       "                        <td id=\"T_43f9aefc_58e5_11eb_b7f9_645aedea5f3frow3_col6\" class=\"data row3 col6\" >122</td>\n",
       "                        <td id=\"T_43f9aefc_58e5_11eb_b7f9_645aedea5f3frow3_col7\" class=\"data row3 col7\" >453</td>\n",
       "                        <td id=\"T_43f9aefc_58e5_11eb_b7f9_645aedea5f3frow3_col8\" class=\"data row3 col8\" >154</td>\n",
       "                        <td id=\"T_43f9aefc_58e5_11eb_b7f9_645aedea5f3frow3_col9\" class=\"data row3 col9\" >50</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                        <th id=\"T_43f9aefc_58e5_11eb_b7f9_645aedea5f3flevel0_row4\" class=\"row_heading level0 row4\" >United</th>\n",
       "                        <td id=\"T_43f9aefc_58e5_11eb_b7f9_645aedea5f3frow4_col0\" class=\"data row4 col0\" >216</td>\n",
       "                        <td id=\"T_43f9aefc_58e5_11eb_b7f9_645aedea5f3frow4_col1\" class=\"data row4 col1\" >379</td>\n",
       "                        <td id=\"T_43f9aefc_58e5_11eb_b7f9_645aedea5f3frow4_col2\" class=\"data row4 col2\" >181</td>\n",
       "                        <td id=\"T_43f9aefc_58e5_11eb_b7f9_645aedea5f3frow4_col3\" class=\"data row4 col3\" >681</td>\n",
       "                        <td id=\"T_43f9aefc_58e5_11eb_b7f9_645aedea5f3frow4_col4\" class=\"data row4 col4\" >22</td>\n",
       "                        <td id=\"T_43f9aefc_58e5_11eb_b7f9_645aedea5f3frow4_col5\" class=\"data row4 col5\" >168</td>\n",
       "                        <td id=\"T_43f9aefc_58e5_11eb_b7f9_645aedea5f3frow4_col6\" class=\"data row4 col6\" >144</td>\n",
       "                        <td id=\"T_43f9aefc_58e5_11eb_b7f9_645aedea5f3frow4_col7\" class=\"data row4 col7\" >525</td>\n",
       "                        <td id=\"T_43f9aefc_58e5_11eb_b7f9_645aedea5f3frow4_col8\" class=\"data row4 col8\" >269</td>\n",
       "                        <td id=\"T_43f9aefc_58e5_11eb_b7f9_645aedea5f3frow4_col9\" class=\"data row4 col9\" >48</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                        <th id=\"T_43f9aefc_58e5_11eb_b7f9_645aedea5f3flevel0_row5\" class=\"row_heading level0 row5\" >Virgin America</th>\n",
       "                        <td id=\"T_43f9aefc_58e5_11eb_b7f9_645aedea5f3frow5_col0\" class=\"data row5 col0\" >19</td>\n",
       "                        <td id=\"T_43f9aefc_58e5_11eb_b7f9_645aedea5f3frow5_col1\" class=\"data row5 col1\" >22</td>\n",
       "                        <td id=\"T_43f9aefc_58e5_11eb_b7f9_645aedea5f3frow5_col2\" class=\"data row5 col2\" >18</td>\n",
       "                        <td id=\"T_43f9aefc_58e5_11eb_b7f9_645aedea5f3frow5_col3\" class=\"data row5 col3\" >60</td>\n",
       "                        <td id=\"T_43f9aefc_58e5_11eb_b7f9_645aedea5f3frow5_col4\" class=\"data row5 col4\" >4</td>\n",
       "                        <td id=\"T_43f9aefc_58e5_11eb_b7f9_645aedea5f3frow5_col5\" class=\"data row5 col5\" >5</td>\n",
       "                        <td id=\"T_43f9aefc_58e5_11eb_b7f9_645aedea5f3frow5_col6\" class=\"data row5 col6\" >28</td>\n",
       "                        <td id=\"T_43f9aefc_58e5_11eb_b7f9_645aedea5f3frow5_col7\" class=\"data row5 col7\" >17</td>\n",
       "                        <td id=\"T_43f9aefc_58e5_11eb_b7f9_645aedea5f3frow5_col8\" class=\"data row5 col8\" >5</td>\n",
       "                        <td id=\"T_43f9aefc_58e5_11eb_b7f9_645aedea5f3frow5_col9\" class=\"data row5 col9\" >3</td>\n",
       "            </tr>\n",
       "    </tbody></table>"
      ],
      "text/plain": [
       "<pandas.io.formats.style.Styler at 0x7fa29278eb10>"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "negative_reasons.style.highlight_max(color='red',axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-01-17T16:58:48.060356Z",
     "start_time": "2021-01-17T16:58:47.620758Z"
    }
   },
   "outputs": [],
   "source": [
    "df[\"date_only\"]=pd.DatetimeIndex(df[\"tweet_created\"]).date\n",
    "df[\"date_only\"]=df[\"date_only\"].apply(lambda x:x.strftime('%d-%m-%Y'))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-01-17T16:58:48.067419Z",
     "start_time": "2021-01-17T16:58:48.062537Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'16-02-2015'"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[\"date_only\"].min()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-01-17T16:58:48.074393Z",
     "start_time": "2021-01-17T16:58:48.069190Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'24-02-2015'"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[\"date_only\"].max()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-01-17T16:58:48.093701Z",
     "start_time": "2021-01-17T16:58:48.076696Z"
    }
   },
   "outputs": [],
   "source": [
    "date_variation=pd.crosstab(df[\"date_only\"],df[\"airline_sentiment\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-01-17T16:58:48.119101Z",
     "start_time": "2021-01-17T16:58:48.095720Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style  type=\"text/css\" >\n",
       "    #T_44461378_58e5_11eb_b7f9_645aedea5f3frow6_col0 {\n",
       "            background-color:  red;\n",
       "        }    #T_44461378_58e5_11eb_b7f9_645aedea5f3frow7_col1 {\n",
       "            background-color:  red;\n",
       "        }    #T_44461378_58e5_11eb_b7f9_645aedea5f3frow7_col2 {\n",
       "            background-color:  red;\n",
       "        }</style><table id=\"T_44461378_58e5_11eb_b7f9_645aedea5f3f\" ><thead>    <tr>        <th class=\"index_name level0\" >airline_sentiment</th>        <th class=\"col_heading level0 col0\" >negative</th>        <th class=\"col_heading level0 col1\" >neutral</th>        <th class=\"col_heading level0 col2\" >positive</th>    </tr>    <tr>        <th class=\"index_name level0\" >date_only</th>        <th class=\"blank\" ></th>        <th class=\"blank\" ></th>        <th class=\"blank\" ></th>    </tr></thead><tbody>\n",
       "                <tr>\n",
       "                        <th id=\"T_44461378_58e5_11eb_b7f9_645aedea5f3flevel0_row0\" class=\"row_heading level0 row0\" >16-02-2015</th>\n",
       "                        <td id=\"T_44461378_58e5_11eb_b7f9_645aedea5f3frow0_col0\" class=\"data row0 col0\" >3</td>\n",
       "                        <td id=\"T_44461378_58e5_11eb_b7f9_645aedea5f3frow0_col1\" class=\"data row0 col1\" >1</td>\n",
       "                        <td id=\"T_44461378_58e5_11eb_b7f9_645aedea5f3frow0_col2\" class=\"data row0 col2\" >0</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                        <th id=\"T_44461378_58e5_11eb_b7f9_645aedea5f3flevel0_row1\" class=\"row_heading level0 row1\" >17-02-2015</th>\n",
       "                        <td id=\"T_44461378_58e5_11eb_b7f9_645aedea5f3frow1_col0\" class=\"data row1 col0\" >838</td>\n",
       "                        <td id=\"T_44461378_58e5_11eb_b7f9_645aedea5f3frow1_col1\" class=\"data row1 col1\" >297</td>\n",
       "                        <td id=\"T_44461378_58e5_11eb_b7f9_645aedea5f3frow1_col2\" class=\"data row1 col2\" >273</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                        <th id=\"T_44461378_58e5_11eb_b7f9_645aedea5f3flevel0_row2\" class=\"row_heading level0 row2\" >18-02-2015</th>\n",
       "                        <td id=\"T_44461378_58e5_11eb_b7f9_645aedea5f3frow2_col0\" class=\"data row2 col0\" >736</td>\n",
       "                        <td id=\"T_44461378_58e5_11eb_b7f9_645aedea5f3frow2_col1\" class=\"data row2 col1\" >335</td>\n",
       "                        <td id=\"T_44461378_58e5_11eb_b7f9_645aedea5f3frow2_col2\" class=\"data row2 col2\" >273</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                        <th id=\"T_44461378_58e5_11eb_b7f9_645aedea5f3flevel0_row3\" class=\"row_heading level0 row3\" >19-02-2015</th>\n",
       "                        <td id=\"T_44461378_58e5_11eb_b7f9_645aedea5f3frow3_col0\" class=\"data row3 col0\" >751</td>\n",
       "                        <td id=\"T_44461378_58e5_11eb_b7f9_645aedea5f3frow3_col1\" class=\"data row3 col1\" >329</td>\n",
       "                        <td id=\"T_44461378_58e5_11eb_b7f9_645aedea5f3frow3_col2\" class=\"data row3 col2\" >296</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                        <th id=\"T_44461378_58e5_11eb_b7f9_645aedea5f3flevel0_row4\" class=\"row_heading level0 row4\" >20-02-2015</th>\n",
       "                        <td id=\"T_44461378_58e5_11eb_b7f9_645aedea5f3frow4_col0\" class=\"data row4 col0\" >835</td>\n",
       "                        <td id=\"T_44461378_58e5_11eb_b7f9_645aedea5f3frow4_col1\" class=\"data row4 col1\" >383</td>\n",
       "                        <td id=\"T_44461378_58e5_11eb_b7f9_645aedea5f3frow4_col2\" class=\"data row4 col2\" >282</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                        <th id=\"T_44461378_58e5_11eb_b7f9_645aedea5f3flevel0_row5\" class=\"row_heading level0 row5\" >21-02-2015</th>\n",
       "                        <td id=\"T_44461378_58e5_11eb_b7f9_645aedea5f3frow5_col0\" class=\"data row5 col0\" >1049</td>\n",
       "                        <td id=\"T_44461378_58e5_11eb_b7f9_645aedea5f3frow5_col1\" class=\"data row5 col1\" >278</td>\n",
       "                        <td id=\"T_44461378_58e5_11eb_b7f9_645aedea5f3frow5_col2\" class=\"data row5 col2\" >230</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                        <th id=\"T_44461378_58e5_11eb_b7f9_645aedea5f3flevel0_row6\" class=\"row_heading level0 row6\" >22-02-2015</th>\n",
       "                        <td id=\"T_44461378_58e5_11eb_b7f9_645aedea5f3frow6_col0\" class=\"data row6 col0\" >2266</td>\n",
       "                        <td id=\"T_44461378_58e5_11eb_b7f9_645aedea5f3frow6_col1\" class=\"data row6 col1\" >463</td>\n",
       "                        <td id=\"T_44461378_58e5_11eb_b7f9_645aedea5f3frow6_col2\" class=\"data row6 col2\" >350</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                        <th id=\"T_44461378_58e5_11eb_b7f9_645aedea5f3flevel0_row7\" class=\"row_heading level0 row7\" >23-02-2015</th>\n",
       "                        <td id=\"T_44461378_58e5_11eb_b7f9_645aedea5f3frow7_col0\" class=\"data row7 col0\" >1919</td>\n",
       "                        <td id=\"T_44461378_58e5_11eb_b7f9_645aedea5f3frow7_col1\" class=\"data row7 col1\" >676</td>\n",
       "                        <td id=\"T_44461378_58e5_11eb_b7f9_645aedea5f3frow7_col2\" class=\"data row7 col2\" >433</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                        <th id=\"T_44461378_58e5_11eb_b7f9_645aedea5f3flevel0_row8\" class=\"row_heading level0 row8\" >24-02-2015</th>\n",
       "                        <td id=\"T_44461378_58e5_11eb_b7f9_645aedea5f3frow8_col0\" class=\"data row8 col0\" >781</td>\n",
       "                        <td id=\"T_44461378_58e5_11eb_b7f9_645aedea5f3frow8_col1\" class=\"data row8 col1\" >337</td>\n",
       "                        <td id=\"T_44461378_58e5_11eb_b7f9_645aedea5f3frow8_col2\" class=\"data row8 col2\" >226</td>\n",
       "            </tr>\n",
       "    </tbody></table>"
      ],
      "text/plain": [
       "<pandas.io.formats.style.Styler at 0x7fa292c34e10>"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "date_variation.style.highlight_max(color='red',axis=0)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# DATA CLEANING"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-01-17T16:58:48.882439Z",
     "start_time": "2021-01-17T16:58:48.120889Z"
    }
   },
   "outputs": [],
   "source": [
    "import re\n",
    "import nltk\n",
    "# !pip install -U nltk\n",
    "# we have to python it will open the interface\n",
    "# import nltk\n",
    "# nltk.download('all')\n",
    "# nltk.download('popular')\n",
    "from nltk.corpus import stopwords\n",
    "stops=set(stopwords.words(\"english\"))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-01-17T16:59:14.937565Z",
     "start_time": "2021-01-17T16:59:14.933343Z"
    }
   },
   "outputs": [],
   "source": [
    "import re\n",
    "\n",
    "\n",
    "\n",
    "def tweet_to_words(tweet):\n",
    "    text_only=re.sub(\"[^a-zA-Z]\",\" \",tweet)\n",
    "    words=text_only.lower().split()\n",
    "    meaningful_words= [w for w in words if not w in stops]\n",
    "    return (\" \".join(meaningful_words))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-01-17T16:59:15.529278Z",
     "start_time": "2021-01-17T16:59:15.526736Z"
    }
   },
   "outputs": [],
   "source": [
    "text=\"AIrlines are doing good now the is because been before in this airline 109\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-01-17T16:59:15.729174Z",
     "start_time": "2021-01-17T16:59:15.724341Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'airlines good airline'"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tweet_to_words(text)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-01-17T16:59:15.896648Z",
     "start_time": "2021-01-17T16:59:15.892704Z"
    }
   },
   "outputs": [],
   "source": [
    "words=text.lower().split(\" \") #word tokenization\n",
    "# text.lower().split(\".\") # sentence tokenization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-01-17T16:59:16.081441Z",
     "start_time": "2021-01-17T16:59:16.075560Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['airlines',\n",
       " 'are',\n",
       " 'doing',\n",
       " 'good',\n",
       " 'now',\n",
       " 'the',\n",
       " 'is',\n",
       " 'because',\n",
       " 'been',\n",
       " 'before',\n",
       " 'in',\n",
       " 'this',\n",
       " 'airline',\n",
       " '109']"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "words"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-01-17T16:59:16.217424Z",
     "start_time": "2021-01-17T16:59:16.214129Z"
    }
   },
   "outputs": [],
   "source": [
    "meaning_ful_words=[w for w in words if not w in stops]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-01-17T16:59:16.385678Z",
     "start_time": "2021-01-17T16:59:16.381304Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['airlines', 'good', 'airline', '109']"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "meaning_ful_words"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-01-17T16:59:16.549769Z",
     "start_time": "2021-01-17T16:59:16.543485Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'airlines good airline 109'"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\" \".join(meaning_ful_words)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-01-17T16:59:16.714156Z",
     "start_time": "2021-01-17T16:59:16.706740Z"
    }
   },
   "outputs": [],
   "source": [
    "import re\n",
    "\n",
    "\n",
    "\n",
    "def tweet_to_words(tweet):\n",
    "    text_only=re.sub(\"[^a-zA-Z]\",\" \",tweet)\n",
    "    words=text_only.lower().split()\n",
    "    meaningful_words= [w for w in words if not w in stops]\n",
    "    return (\" \".join(meaningful_words))\n",
    "    \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-01-17T16:59:17.083949Z",
     "start_time": "2021-01-17T16:59:16.862308Z"
    }
   },
   "outputs": [],
   "source": [
    "df[\"clean_text\"]=df[\"text\"].apply(lambda x:tweet_to_words(x))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-01-17T16:59:17.790436Z",
     "start_time": "2021-01-17T16:59:17.775558Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>text</th>\n",
       "      <th>clean_text</th>\n",
       "      <th>airline_sentiment</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>@VirginAmerica What @dhepburn said.</td>\n",
       "      <td>virginamerica dhepburn said</td>\n",
       "      <td>neutral</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>@VirginAmerica plus you've added commercials t...</td>\n",
       "      <td>virginamerica plus added commercials experienc...</td>\n",
       "      <td>positive</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>@VirginAmerica I didn't today... Must mean I n...</td>\n",
       "      <td>virginamerica today must mean need take anothe...</td>\n",
       "      <td>neutral</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>@VirginAmerica it's really aggressive to blast...</td>\n",
       "      <td>virginamerica really aggressive blast obnoxiou...</td>\n",
       "      <td>negative</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>@VirginAmerica and it's a really big bad thing...</td>\n",
       "      <td>virginamerica really big bad thing</td>\n",
       "      <td>negative</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>@VirginAmerica seriously would pay $30 a fligh...</td>\n",
       "      <td>virginamerica seriously would pay flight seats...</td>\n",
       "      <td>negative</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>@VirginAmerica yes, nearly every time I fly VX...</td>\n",
       "      <td>virginamerica yes nearly every time fly vx ear...</td>\n",
       "      <td>positive</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>@VirginAmerica Really missed a prime opportuni...</td>\n",
       "      <td>virginamerica really missed prime opportunity ...</td>\n",
       "      <td>neutral</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>@virginamerica Well, I didn't…but NOW I DO! :-D</td>\n",
       "      <td>virginamerica well</td>\n",
       "      <td>positive</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>@VirginAmerica it was amazing, and arrived an ...</td>\n",
       "      <td>virginamerica amazing arrived hour early good</td>\n",
       "      <td>positive</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                text  \\\n",
       "0                @VirginAmerica What @dhepburn said.   \n",
       "1  @VirginAmerica plus you've added commercials t...   \n",
       "2  @VirginAmerica I didn't today... Must mean I n...   \n",
       "3  @VirginAmerica it's really aggressive to blast...   \n",
       "4  @VirginAmerica and it's a really big bad thing...   \n",
       "5  @VirginAmerica seriously would pay $30 a fligh...   \n",
       "6  @VirginAmerica yes, nearly every time I fly VX...   \n",
       "7  @VirginAmerica Really missed a prime opportuni...   \n",
       "8    @virginamerica Well, I didn't…but NOW I DO! :-D   \n",
       "9  @VirginAmerica it was amazing, and arrived an ...   \n",
       "\n",
       "                                          clean_text airline_sentiment  \n",
       "0                        virginamerica dhepburn said           neutral  \n",
       "1  virginamerica plus added commercials experienc...          positive  \n",
       "2  virginamerica today must mean need take anothe...           neutral  \n",
       "3  virginamerica really aggressive blast obnoxiou...          negative  \n",
       "4                 virginamerica really big bad thing          negative  \n",
       "5  virginamerica seriously would pay flight seats...          negative  \n",
       "6  virginamerica yes nearly every time fly vx ear...          positive  \n",
       "7  virginamerica really missed prime opportunity ...           neutral  \n",
       "8                                 virginamerica well          positive  \n",
       "9      virginamerica amazing arrived hour early good          positive  "
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[[\"text\",\"clean_text\",\"airline_sentiment\"]].head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-01-17T16:59:18.125297Z",
     "start_time": "2021-01-17T16:59:18.118941Z"
    }
   },
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import LabelEncoder\n",
    "LE=LabelEncoder()\n",
    "df[\"label\"]=LE.fit_transform(df[\"airline_sentiment\"])\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-01-17T16:59:18.450699Z",
     "start_time": "2021-01-17T16:59:18.438341Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>clean_text</th>\n",
       "      <th>label</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>virginamerica dhepburn said</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>virginamerica plus added commercials experienc...</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>virginamerica today must mean need take anothe...</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>virginamerica really aggressive blast obnoxiou...</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>virginamerica really big bad thing</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>virginamerica seriously would pay flight seats...</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>virginamerica yes nearly every time fly vx ear...</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>virginamerica really missed prime opportunity ...</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>virginamerica well</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>virginamerica amazing arrived hour early good</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                          clean_text  label\n",
       "0                        virginamerica dhepburn said      1\n",
       "1  virginamerica plus added commercials experienc...      2\n",
       "2  virginamerica today must mean need take anothe...      1\n",
       "3  virginamerica really aggressive blast obnoxiou...      0\n",
       "4                 virginamerica really big bad thing      0\n",
       "5  virginamerica seriously would pay flight seats...      0\n",
       "6  virginamerica yes nearly every time fly vx ear...      2\n",
       "7  virginamerica really missed prime opportunity ...      1\n",
       "8                                 virginamerica well      2\n",
       "9      virginamerica amazing arrived hour early good      2"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[[\"clean_text\",\"label\"]].head(10)  # 0 - Negative 1 -Neutral 2 -Positive"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-01-17T16:59:18.738170Z",
     "start_time": "2021-01-17T16:59:18.735740Z"
    }
   },
   "outputs": [],
   "source": [
    "# tfidf for train  ...apply calculated tfidf values to the test data "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-01-17T16:59:18.995963Z",
     "start_time": "2021-01-17T16:59:18.990802Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "14640"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-01-17T16:59:19.233267Z",
     "start_time": "2021-01-17T16:59:19.229472Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "pandas.core.series.Series"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(df[\"label\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-01-17T16:59:19.475628Z",
     "start_time": "2021-01-17T16:59:19.472870Z"
    }
   },
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-01-17T16:59:19.788929Z",
     "start_time": "2021-01-17T16:59:19.782975Z"
    }
   },
   "outputs": [],
   "source": [
    "X_train,X_test,y_train,y_test=train_test_split(df[\"clean_text\"],df[\"label\"],test_size=0.2,random_state=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-01-17T16:59:20.066240Z",
     "start_time": "2021-01-17T16:59:20.061152Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "# Train data samples 11712\n",
      "# Test data samples 2928\n"
     ]
    }
   ],
   "source": [
    "print('# Train data samples',X_train.shape[0])\n",
    "print('# Test data samples',X_test.shape[0])\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-01-17T16:59:20.375953Z",
     "start_time": "2021-01-17T16:59:20.372690Z"
    }
   },
   "outputs": [],
   "source": [
    "\n",
    "assert X_train.shape[0]== y_train.shape[0]\n",
    "assert X_test.shape[0]==y_test.shape[0]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Data Preprocessing "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-01-17T16:59:20.960268Z",
     "start_time": "2021-01-17T16:59:20.957282Z"
    }
   },
   "outputs": [],
   "source": [
    "from sklearn.feature_extraction.text import TfidfVectorizer\n",
    "vec=TfidfVectorizer()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-01-17T16:59:21.765330Z",
     "start_time": "2021-01-17T16:59:21.599575Z"
    }
   },
   "outputs": [],
   "source": [
    "X_train=vec.fit_transform(X_train) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-01-17T16:59:21.827694Z",
     "start_time": "2021-01-17T16:59:21.813904Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "11881"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(vec.get_feature_names())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-01-17T16:59:22.094399Z",
     "start_time": "2021-01-17T16:59:22.045131Z"
    }
   },
   "outputs": [],
   "source": [
    "X_test=vec.transform(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-01-17T16:59:22.497973Z",
     "start_time": "2021-01-17T16:59:22.492189Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 814, 3688, 1408, ..., 4787, 3767,  369], dtype=int32)"
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train.indices "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-01-17T16:59:22.695719Z",
     "start_time": "2021-01-17T16:59:22.692260Z"
    }
   },
   "outputs": [],
   "source": [
    "import scipy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-01-17T16:59:23.129387Z",
     "start_time": "2021-01-17T16:59:22.872663Z"
    }
   },
   "outputs": [],
   "source": [
    "X_train=scipy.sparse.csr_matrix.todense(X_train)\n",
    "X_test=scipy.sparse.csr_matrix.todense(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-01-17T16:59:23.135885Z",
     "start_time": "2021-01-17T16:59:23.131617Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "numpy.matrix"
      ]
     },
     "execution_count": 65,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(X_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-01-17T16:59:23.278983Z",
     "start_time": "2021-01-17T16:59:23.273671Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "numpy.int64"
      ]
     },
     "execution_count": 66,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(y_train.iloc[0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-01-17T16:59:23.454162Z",
     "start_time": "2021-01-17T16:59:23.449132Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 67,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_train.iloc[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-01-17T16:59:23.639812Z",
     "start_time": "2021-01-17T16:59:23.633437Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2366     0\n",
       "6635     0\n",
       "8126     1\n",
       "14213    0\n",
       "3186     0\n",
       "        ..\n",
       "905      0\n",
       "5192     0\n",
       "12172    2\n",
       "235      2\n",
       "13349    0\n",
       "Name: label, Length: 11712, dtype: int64"
      ]
     },
     "execution_count": 68,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_train  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-01-17T16:59:23.859552Z",
     "start_time": "2021-01-17T16:59:23.855530Z"
    }
   },
   "outputs": [],
   "source": [
    "y_train=tf.keras.utils.to_categorical(y_train,num_classes=3,dtype='float32')\n",
    "y_test=tf.keras.utils.to_categorical(y_test,num_classes=3,dtype='float32')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-01-17T16:59:24.047829Z",
     "start_time": "2021-01-17T16:59:24.040692Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "numpy.ndarray"
      ]
     },
     "execution_count": 70,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-01-17T16:59:24.263136Z",
     "start_time": "2021-01-17T16:59:24.256725Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1., 0., 0.], dtype=float32)"
      ]
     },
     "execution_count": 71,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_train[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-01-17T16:59:24.486928Z",
     "start_time": "2021-01-17T16:59:24.481370Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "matrix([[0., 0., 0., ..., 0., 0., 0.]])"
      ]
     },
     "execution_count": 72,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-01-17T16:59:24.660170Z",
     "start_time": "2021-01-17T16:59:24.655927Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1., 0., 0.], dtype=float32)"
      ]
     },
     "execution_count": 73,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_train[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-01-17T16:59:24.853361Z",
     "start_time": "2021-01-17T16:59:24.844993Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(11712, 11881)"
      ]
     },
     "execution_count": 74,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-01-17T16:59:25.028178Z",
     "start_time": "2021-01-17T16:59:25.023909Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(2928, 11881)"
      ]
     },
     "execution_count": 75,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_test.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-01-17T16:59:25.218359Z",
     "start_time": "2021-01-17T16:59:25.212764Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(2928, 3)"
      ]
     },
     "execution_count": 76,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_test.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-01-17T16:59:25.434524Z",
     "start_time": "2021-01-17T16:59:25.429360Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(11712, 3)"
      ]
     },
     "execution_count": 77,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_train.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Model Building"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-01-17T16:59:31.069905Z",
     "start_time": "2021-01-17T16:59:30.493849Z"
    }
   },
   "outputs": [],
   "source": [
    "base_model=tf.keras.Sequential()\n",
    "base_model.add(tf.keras.layers.Dense(X_train.shape[0],activation='relu',input_shape=(X_train.shape[1],)))\n",
    "base_model.add(tf.keras.layers.Dense(64,activation=\"relu\"))\n",
    "base_model.add(tf.keras.layers.Dense(3,activation='softmax'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-01-17T16:59:31.078436Z",
     "start_time": "2021-01-17T16:59:31.072114Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"sequential\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "dense (Dense)                (None, 11712)             139161984 \n",
      "_________________________________________________________________\n",
      "dense_1 (Dense)              (None, 64)                749632    \n",
      "_________________________________________________________________\n",
      "dense_2 (Dense)              (None, 3)                 195       \n",
      "=================================================================\n",
      "Total params: 139,911,811\n",
      "Trainable params: 139,911,811\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "base_model.summary() # report"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-01-17T16:59:31.096125Z",
     "start_time": "2021-01-17T16:59:31.082082Z"
    }
   },
   "outputs": [],
   "source": [
    "base_model.compile(optimizer='adam',loss='categorical_crossentropy',metrics=['accuracy'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-01-18T07:16:16.602672Z",
     "start_time": "2021-01-17T16:59:36.438631Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/20\n",
      "366/366 - 223s - loss: 0.6004 - accuracy: 0.7570 - val_loss: 0.5182 - val_accuracy: 0.7930\n",
      "Epoch 2/20\n",
      "366/366 - 234s - loss: 0.2391 - accuracy: 0.9115 - val_loss: 0.6544 - val_accuracy: 0.7845\n",
      "Epoch 3/20\n",
      "366/366 - 235s - loss: 0.0711 - accuracy: 0.9758 - val_loss: 0.8879 - val_accuracy: 0.7729\n",
      "Epoch 4/20\n",
      "366/366 - 340s - loss: 0.0288 - accuracy: 0.9897 - val_loss: 0.9948 - val_accuracy: 0.7695\n",
      "Epoch 5/20\n",
      "366/366 - 184s - loss: 0.0197 - accuracy: 0.9933 - val_loss: 1.1075 - val_accuracy: 0.7763\n",
      "Epoch 6/20\n",
      "366/366 - 43428s - loss: 0.0143 - accuracy: 0.9942 - val_loss: 1.1188 - val_accuracy: 0.7756\n",
      "Epoch 7/20\n",
      "366/366 - 203s - loss: 0.0112 - accuracy: 0.9943 - val_loss: 1.2538 - val_accuracy: 0.7770\n",
      "Epoch 8/20\n",
      "366/366 - 198s - loss: 0.0122 - accuracy: 0.9945 - val_loss: 1.2054 - val_accuracy: 0.7790\n",
      "Epoch 9/20\n",
      "366/366 - 181s - loss: 0.0110 - accuracy: 0.9953 - val_loss: 1.2193 - val_accuracy: 0.7770\n",
      "Epoch 10/20\n",
      "366/366 - 4246s - loss: 0.0100 - accuracy: 0.9949 - val_loss: 1.2771 - val_accuracy: 0.7783\n",
      "Epoch 11/20\n",
      "366/366 - 180s - loss: 0.0108 - accuracy: 0.9947 - val_loss: 1.2261 - val_accuracy: 0.7742\n",
      "Epoch 12/20\n",
      "366/366 - 180s - loss: 0.0104 - accuracy: 0.9954 - val_loss: 1.3081 - val_accuracy: 0.7801\n",
      "Epoch 13/20\n",
      "366/366 - 179s - loss: 0.0107 - accuracy: 0.9953 - val_loss: 1.5083 - val_accuracy: 0.7695\n",
      "Epoch 14/20\n",
      "366/366 - 180s - loss: 0.0145 - accuracy: 0.9932 - val_loss: 1.4297 - val_accuracy: 0.7661\n",
      "Epoch 15/20\n",
      "366/366 - 182s - loss: 0.0160 - accuracy: 0.9935 - val_loss: 1.4786 - val_accuracy: 0.7650\n",
      "Epoch 16/20\n",
      "366/366 - 209s - loss: 0.0130 - accuracy: 0.9945 - val_loss: 1.3919 - val_accuracy: 0.7650\n",
      "Epoch 17/20\n",
      "366/366 - 190s - loss: 0.0106 - accuracy: 0.9948 - val_loss: 1.4566 - val_accuracy: 0.7695\n",
      "Epoch 18/20\n",
      "366/366 - 209s - loss: 0.0095 - accuracy: 0.9955 - val_loss: 1.4939 - val_accuracy: 0.7739\n",
      "Epoch 19/20\n",
      "366/366 - 219s - loss: 0.0084 - accuracy: 0.9959 - val_loss: 1.5068 - val_accuracy: 0.7736\n",
      "Epoch 20/20\n",
      "366/366 - 188s - loss: 0.0085 - accuracy: 0.9958 - val_loss: 1.5263 - val_accuracy: 0.7732\n"
     ]
    }
   ],
   "source": [
    "history=base_model.fit(X_train,y_train,epochs=20,validation_data=(X_test,y_test),verbose=2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-01-18T07:30:03.883866Z",
     "start_time": "2021-01-18T07:30:02.862682Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Accuracy')"
      ]
     },
     "execution_count": 85,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1296x576 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(18,8))\n",
    "plt.subplot(121)\n",
    "plt.plot(history.history['loss'])\n",
    "plt.plot(history.history['val_loss'])\n",
    "plt.xlabel('Epochs')\n",
    "plt.ylabel('loss')\n",
    "plt.legend(['train loss','test loss'])\n",
    "\n",
    "\n",
    "plt.subplot(122)\n",
    "plt.plot(history.history['accuracy'])\n",
    "plt.plot(history.history['val_accuracy'])\n",
    "plt.legend(['train_accuracy','test accuracy'])\n",
    "plt.xlabel('Epochs')\n",
    "plt.ylabel('Accuracy')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-01-18T07:30:33.184436Z",
     "start_time": "2021-01-18T07:30:26.959469Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "92/92 [==============================] - 6s 64ms/step - loss: 1.5263 - accuracy: 0.7732\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[1.5262649059295654, 0.7732240557670593]"
      ]
     },
     "execution_count": 87,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "base_model.evaluate(X_test,y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-01-18T07:30:49.097280Z",
     "start_time": "2021-01-18T07:30:45.821738Z"
    }
   },
   "outputs": [],
   "source": [
    "base_model.save('base_model.h5')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3.7.7 64-bit ('rec_sys': conda)",
   "language": "python",
   "name": "python37764bitrecsysconda33c625ed33b24c0c8b9f3a8f8ff4cc60"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
